Concurrency : running multiple task parallely


WorkQueues

1. Run a function on any cpu 
  work_on_cpu(1, my_function, NULL)

2. Run function on all CPU
  sched_on_each_cpu(my_function);  
    /*
        get_online_cpu(); // take lock
            for_each_online_cpu(cpu)
            {
              work_on_cpu(cpu, func, arg);
            }
        put_online_cpu(); // release lock
    */

printf("function running on core = \n",smp_processor_id());

3.  

work_struct 
workqueue_struct

/* creates workQueue and wqManager */
test_queue = alloc_workqueue("test_queue", WQ_RECLAIM | WQ_UNBOUND, 0);

INIT_WORK((struct work_struct*)&work1, my_work_function);

queue_work( test_queue, (struct work_struct *)&work1);
queue_work_on(3, test_queue, (struct work_struct *)&work1);

/*System work queue for task with less execution time */
schedule_work()    ------> queue_work(system_wq,
schedule_work_on()


/* Delayed 5 sec */
queue_deleyed_work( , , , 5*HZ)
schedule_delayed_work

*************************************************************************************************************************
schedule() will get called in one of following case

1. timer scheduler_tick() 

2. TIF_NEED_RESCHED(set by timer tick) checked on 
    INTR & User space return path

3. Explicit blocking
    itself takes out of run queue
    call directly to schedule()
.............................................................................
    
Scheduling algorithm? FIFO, SCHED_RR, CFS (RB Tree with virtual_run_time)  
        CRD  : CR7
            
        cfs_rq  - SCHED_BATCH, SCHED_OTHER, SCHED_IDLE
        realtime_rq - SCHED_RR, SCHED_FIFO
        deadline_rq - SCHED_DEADLINE
                           
 Process which should be given low priority and should not be allowed to compete with other 
 high priority processes, make them as SCHED_IDLE process.                          
.............................................................................

Process with low nice value, high priority
will decide how often the virtual run time will get updated.

..........................................................................................

Execution context:

1. HardIRQ : Top Half Handlers (10's micro second)

  Register  
    request_irq()

  Un-Register
    free_irq()
.........................................................................................

2. SoftIRQ (together should not spill over a jiffie)

    Tasklet
    NAPI
    Block I/O
    irq_desc->irqaction

.........................................................................................
3. Process Context 

  If we know its going to take more than a jiffie, go for a threaded IRQ.
    request_threaded_irq()
    
    kthread
    concurrency managed workqueues
    User process, threads
.........................................................................................
4. Idle Context

    Swapper / init task



