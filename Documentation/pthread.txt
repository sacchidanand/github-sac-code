  P-Thread API
**********************
1. pthread_create
2. pthread_exit
3. pthread_join
4. pthread_cancel
5. pthread_kill
6. pthread_self
--------------------------------------------------------------------------------------


1.pthread_create()

  int pthread_create(pthread_t *thread, 
      const pthread_attr_t *attr,
      void *(*start_routine) (void *), 
      void *arg);

DESCRIPTION

  The pthread_create() function starts a new thread in the calling
  process.  The new thread starts execution by invoking
  start_routine(); arg is passed as the sole argument of
  start_routine().

  The new thread terminates in one of the following ways:

  * It calls pthread_exit(3), specifying an exit status value that is
  available to another thread in the same process that calls
  pthread_join(3).

  * It returns from start_routine().  This is equivalent to calling
  pthread_exit(3) with the value supplied in the return statement.

  * It is canceled (see pthread_cancel(3)).

  * Any of the threads in the process calls exit(3), or the main thread
  performs a return from main().  This causes the termination of all
  threads in the process.
------------------------------------------------------------------------------------------------------------  


2. pthread_exit()
void pthread_exit(void *retval);

If thread is joinable, 
this will terminate the thread and will return retval to thread which calls pthread_join() in same process.

When last thread terminates, the process will exit(0) and atexit() will call 
for freeing up the shared resources like mutex, semaphores, cond_vars, fd etc.
--------------------------------------------------------------------------------------------------------------  


3. pthread_join()
  int pthread_join(pthread_t thread, void **retval);
  The pthread_join() function waits for the thread specified by joinable thread
  to execute first on high priority and terminate.
--------------------------------------------------------------------------------------------------------------  

4. pthread_cancel
  
int pthread_cancel(pthread_t pthread);

##pthread_cancel(pthread)
      ->   pthread_cleanup_pop()
      ->   pthread_exit()

pthread_setcancelstate()
    a. enable
    b. disable

pthread_setcanceltype()
    a. asynchronous       : immediate
    b. deferred           : later call
--------------------------------------------------------------------------------------------------------------  

5. pthread_kill

int pthread_kill(pthread_t thread, int sig);

pthread_cancel is during execution,
pthread_kill is to remove thred when sleeping, running etc.

If the disposition of the signal is "stop", "continue", "terminate",
this action will affect the whole process.
Means, SIGKILL -9 will terminate the whole process & all threads instead of single thread.


--------------------------------------------------------------------------------------------------------------  

6. pthread_self

pthread_t pthread_self(pthread_t thread);
pthread_equal()


Thread IDs are guaranteed to be unique only within a process.
A thread ID may be reused after a terminated thread has been joined, or
a detached thread has terminated.

The thread ID returned by pthread_self() is not the same thing as the
kernel thread ID returned by a call to gettid(2).







